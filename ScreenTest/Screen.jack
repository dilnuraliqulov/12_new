class Screen {

    static int screen, kbd;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let kbd = 24576;
        let color = true;
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = screen;
        while (i < kbd) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int mem, mod;

        // Validate coordinates
        if ((x < 0) | (x >= 512)) { // 0 <= x < 512
            do Sys.error(7);
        }
        if ((y < 0) | (y >= 256)) { // 0 <= y < 256
            do Sys.error(7);
        }

        // Calculate memory address and bit position
        let mem = screen + Math.multiply(y, 32) + Math.divide(x, 16);
        let mod = x % 16;

        // Draw pixel
        if (color) {
            do Memory.poke(mem, Memory.peek(mem) | Math.twoToThe(mod));
        } else {
            do Memory.poke(mem, Memory.peek(mem) & ~Math.twoToThe(mod));
        }
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, x, y, diff, steep, yStep;

        // Validate coordinates
        if ((x1 < 0) | (x1 >= 512) | (x2 < 0) | (x2 >= 512)) {
            do Sys.error(7);
        }
        if ((y1 < 0) | (y1 >= 256) | (y2 < 0) | (y2 >= 256)) {
            do Sys.error(7);
        }

        // Compute differences
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        let steep = dy > dx;

        // Swap coordinates if steep
        if (steep) {
            let x1 = y1;
            let y1 = x1;
            let x2 = y2;
            let y2 = x2;
        }

        // Swap coordinates to ensure left-to-right drawing
        if (x1 > x2) {
            let x1 = x2;
            let x2 = x1;
            let y1 = y2;
            let y2 = y1;
        }

        let diff = 0;
        let x = x1;
        let y = y1;

        if (y1 > y2) {
            let yStep = -1;
        } else {
            let yStep = 1;
        }

        while (x <= x2) {
            if (steep) {
                do Screen.drawPixel(y, x);
            } else {
                do Screen.drawPixel(x, y);
            }

            let x = x + 1;
            let diff = diff + dy;

            if (diff > dx) {
                let y = y + yStep;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int temp, y;

        // Swap coordinates if necessary
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        // Validate coordinates
        if ((x1 < 0) | (x1 >= 512) | (x2 < 0) | (x2 >= 512)) {
            do Sys.error(7);
        }
        if ((y1 < 0) | (y1 >= 256) | (y2 < 0) | (y2 >= 256)) {
            do Sys.error(7);
        }

        // Draw each horizontal line
        let y = y1;
        while (y <= y2) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int dy, term;

        // Validate coordinates and radius
        if ((cx < 0) | (cx >= 512) | (cy < 0) | (cy >= 256)) {
            do Sys.error(7);
        }
        if ((r < 0) | ((cx - r) < 0) | ((cx + r) >= 512) | ((cy - r) < 0) | ((cy + r) >= 256)) {
            do Sys.error(7);
        }

        // Draw circle using horizontal lines
        let dy = -r;
        while (dy <= r) {
            let term = Math.sqrt(r * r - dy * dy);
            do Screen.drawLine(cx - term, cy + dy, cx + term, cy + dy);
            let dy = dy + 1;
        }
        return;
    }
}
//byme
